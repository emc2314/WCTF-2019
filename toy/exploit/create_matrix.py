# region set-magic
mask = 0xb64e4d3fa8e7331bd871fa30d46d4dba
magic = []
tmp = (1 << 128)
for i in range(128):
    tmp = tmp >> 1
    magic.append(tmp)
controller=bin(mask)[2:]
for i in range(128, 8256):
    i_magic = 0
    for point in range(128):
        if controller[point]=='1':
            i_magic ^= magic[i-128+point]
    magic.append(i_magic)
# endregion

# region set-ttable
ttable = []
for i in range(128):
    tmp=[]
    for j in range(128):
        tmp.append(-1)
    ttable.append(tmp)
point = 128
for i in range(127):
    for j in range(i + 1, 128):
        ttable[i][j] = point
        ttable[j][i] = point
        point += 1
alreadylist=[]
for i in range(128):
    for j in range(128):
        assert ttable[i][j]==ttable[j][i]
        assert ttable[i][j]<8256
        if ttable[i][j] not in alreadylist and ttable[i][j]!=-1:
            alreadylist.append(ttable[i][j])
assert len(alreadylist)==8256-128
for i in range(128):
    assert ttable[i][i]==-1
# endregion

# region set-debug
r = 0xbeafb1b122334455deadbeafaabbccdd
the_true_r=[]
for i in range(8256):
    the_true_r.append(-1)
tmprrr=r
for i in range(128):
    the_true_r[127-i]=(tmprrr&1)
    tmprrr=tmprrr>>1
for i in range(128):
    for j in range(128):
        if i!=j:
            if the_true_r[ttable[i][j]]==-1:
                assert ttable[i][j]==ttable[j][i]
                the_true_r[ttable[i][j]]=(the_true_r[i]&the_true_r[j])
            else:
                assert ttable[i][j]==ttable[j][i]
                assert the_true_r[ttable[i][j]]==(the_true_r[i]&the_true_r[j])
def debug_output(arlist):
    debutoutputbit=0
    assert len(arlist)==8256
    assert len(the_true_r)==8256
    for i in range(8256):
        debutoutputbit=debutoutputbit^(arlist[i]&the_true_r[i])
    return debutoutputbit
# endregion

# region fuction
def merge_1ci_into_rlist(one_magic, rlist):
    tmp = one_magic
    for i in range(128):
        if tmp & 1 ==1:
            rlist[127-i]=1-rlist[127-i]
        tmp=tmp>>1
def merge_2ci_into_rlist(magic_1, magic_2, rlist):
    # collect magic_1 and magic2's args
    arg1 = []
    tmp1 = magic_1
    arg2 = []
    tmp2 = magic_2
    for i in range(128):
        if tmp1 & 1 == 1:
            arg1.append(127 - i)
        tmp1 = tmp1 >> 1
        if tmp2 & 1 == 1:
            arg2.append(127 - i)
        tmp2 = tmp2 >> 1

    for i in arg1:
        for j in arg2:
            if i!=j:
                rlistlocation = ttable[i][j]
                rlist[rlistlocation] = 1 - rlist[rlistlocation]
            if i==j:
                rlist[i] = 1-rlist[i]
box = [78, 65, 90, 99, 117, 113, 87, 119, 64, 69, 114, 86, 72, 123, 91, 103, 124, 93, 79, 82, 76, 84, 106, 73, 110, 92,
       118, 63, 109, 101, 67, 122, 98, 111, 80, 105, 108, 107, 100, 81, 125, 71, 96, 83, 75, 68, 95, 74, 104, 112, 121,
       115, 77, 89, 85, 97, 70, 120, 88, 66, 94, 102, 116]
def generate1(magic128, outputbit):
    s = magic128[::-1]
    rlist = []
    for i in range(8256):
        rlist.append(0)
    result = outputbit
    if outputbit == 1:
        merge_1ci_into_rlist(s[33], rlist)
    merge_2ci_into_rlist(s[33], s[127], rlist)
    merge_1ci_into_rlist(s[127], rlist)
    for i in range(0, 63):
        if i != 33:
            merge_1ci_into_rlist(s[i], rlist)
            merge_2ci_into_rlist(s[i], s[33], rlist)
        if box[i] != 33:
            merge_1ci_into_rlist(s[box[i]], rlist)
            merge_2ci_into_rlist(s[box[i]], s[33], rlist)
    return rlist,result
def generate2(magic128, outputbit):
    s = magic128[::-1]
    rlist = []
    for i in range(8256):
        rlist.append(0)
    result = outputbit
    if outputbit == 1:
        merge_1ci_into_rlist(s[53], rlist)

    merge_2ci_into_rlist(s[53], s[127], rlist)
    merge_1ci_into_rlist(s[127], rlist)
    for i in range(0, 63):
        if i != 53:
            merge_1ci_into_rlist(s[i], rlist)
            merge_2ci_into_rlist(s[i], s[53], rlist)
        if box[i] != 53:
            merge_1ci_into_rlist(s[box[i]], rlist)
            merge_2ci_into_rlist(s[box[i]], s[53], rlist)
    return rlist,result
# endregion

# region run
output = open("output", "rb").read()
point=1
for i in output:
    tmp=ord(i)
    tmplist=[]
    for j in range(8):
        tmplist.append(0)
    for j in range(8):
        tmplist[7-j]=tmp&1
        tmp=tmp>>1
    for i in tmplist:
        l1,r1=generate1(magic[point:point+128],i)
        l2,r2=generate2(magic[point:point+128],i)
        assert debug_output(l1)==r1
        assert debug_output(l2)==r2
        print r1,l1
        print r2,l2
        point+=1
# endregion
